From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Wed, 28 Sep 2022 12:46:07 +0200
Subject: [PATCH] Standardize Thread naming


diff --git a/src/main/java/ga/windpvp/windspigot/async/entitytracker/AsyncEntityTracker.java b/src/main/java/ga/windpvp/windspigot/async/entitytracker/AsyncEntityTracker.java
index 52d0fa190d2ee4bff2d7334c39b831822f34660e..d2defc2036b5438443293dab64ab766181c68462 100644
--- a/src/main/java/ga/windpvp/windspigot/async/entitytracker/AsyncEntityTracker.java
+++ b/src/main/java/ga/windpvp/windspigot/async/entitytracker/AsyncEntityTracker.java
@@ -12,7 +12,7 @@ import net.titanium.config.TitaniumConfig;
 public class AsyncEntityTracker extends EntityTracker {
 
     private static final int threadCount = TitaniumConfig.get().entityTracker.async.threads;
-    private static final ExecutorService trackingThreadExecutor = Executors.newFixedThreadPool(threadCount, new ThreadFactoryBuilder().setNameFormat("Titanium Entity Tracker Thread").build());
+    private static final ExecutorService trackingThreadExecutor = Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat("Titanium - Entity Tracker Thread #%d").build());
 
     private final ResettableLatch latch = new ResettableLatch(threadCount);
 
diff --git a/src/main/java/ga/windpvp/windspigot/async/pathsearch/SearchHandler.java b/src/main/java/ga/windpvp/windspigot/async/pathsearch/SearchHandler.java
index dd1276c28ca4168f5498401a59e6940f76080054..8cae1fbde87b9bfd097f9849f3f694a5fd0bd6f8 100644
--- a/src/main/java/ga/windpvp/windspigot/async/pathsearch/SearchHandler.java
+++ b/src/main/java/ga/windpvp/windspigot/async/pathsearch/SearchHandler.java
@@ -16,7 +16,7 @@ public class SearchHandler {
 
     private static SearchHandler INSTANCE;
     private final ExecutorService executor = Executors.newFixedThreadPool(TitaniumConfig.get().pathSearches.async.threads,
-            new ThreadFactoryBuilder().setNameFormat("Titanium Entity Path Search Thread %d").build());
+            new ThreadFactoryBuilder().setNameFormat("Titanium - Entity Path Search Thread #%d").build());
 
     public SearchHandler() {
         INSTANCE = this;
diff --git a/src/main/java/net/minecraft/server/HttpUtilities.java b/src/main/java/net/minecraft/server/HttpUtilities.java
index 4132d8bf05e8b4d4fba2d4489782f0965c0ab5d3..84199759f0125b702aae6e98c576e4bc1ce8cbc0 100644
--- a/src/main/java/net/minecraft/server/HttpUtilities.java
+++ b/src/main/java/net/minecraft/server/HttpUtilities.java
@@ -21,7 +21,7 @@ import org.apache.logging.log4j.Logger;
 
 public class HttpUtilities {
 
-    public static final ListeningExecutorService a = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool((new ThreadFactoryBuilder()).setDaemon(true).setNameFormat("Downloader %d").build()));
+    public static final ListeningExecutorService a = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool((new ThreadFactoryBuilder()).setDaemon(true).setNameFormat("Downloader #%d").build()));
     private static final AtomicInteger b = new AtomicInteger(0);
     private static final Logger c = LogManager.getLogger();
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayInChat.java b/src/main/java/net/minecraft/server/PacketPlayInChat.java
index 18358b4324a7da15d932c11f19d657345da619af..4ddc4f4b8ef11fce0332cc3c434f87f6a99f3ce0 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInChat.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInChat.java
@@ -26,7 +26,7 @@ public class PacketPlayInChat implements Packet<PacketListenerPlayIn> {
 
     // Spigot Start
     private static final java.util.concurrent.ExecutorService executors = java.util.concurrent.Executors.newCachedThreadPool(
-            new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon( true ).setNameFormat( "Async Chat Thread - #%d" ).build() );
+            new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon( true ).setNameFormat( "Async Chat Thread #%d" ).build() );
     public void a(final PacketListenerPlayIn packetlistenerplayin) {
         if ( !a.startsWith("/") )
         {
diff --git a/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java b/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
index 3440a33775b8ccc09f67d3c294c0ea0dd81aa2ae..ab19be86c8a54cd51d3368a5c89d7956879cc863 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
@@ -44,7 +44,7 @@ public class PacketPlayInTabComplete implements Packet<PacketListenerPlayIn> {
     }
 
     // Titanium start - Async tab complete
-    private static final ExecutorService TAB_COMPLETION_EXECUTOR = Executors.newCachedThreadPool(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("Titanium TabComplete Thread - %d").build());
+    private static final ExecutorService TAB_COMPLETION_EXECUTOR = Executors.newCachedThreadPool(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("Titanium - Tab Complete Thread #%d").build());
     public void a(PacketListenerPlayIn packetlistenerplayin) {
         TAB_COMPLETION_EXECUTOR.submit(() -> packetlistenerplayin.a(this));
         // Titanium end
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index 9e0e4fdfaed384cafa9faba5b93c218870a36229..2856c5bb120ed43a46b480d7b833b382eeb40a42 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -27,7 +27,7 @@ public class TileEntitySkull extends TileEntity {
     // Spigot start
     public static final Executor executor = Executors.newFixedThreadPool(3,
             new ThreadFactoryBuilder()
-                    .setNameFormat("Head Conversion Thread - %1$d")
+                    .setNameFormat("Head Conversion Thread #%d")
                     .build()
     );
     public static final LoadingCache<String, GameProfile> skinCache = Caffeine.newBuilder() // Titanium - replace guava cache with caffeine
diff --git a/src/main/java/net/titanium/Titanium.java b/src/main/java/net/titanium/Titanium.java
index dd14ef74b678245055c62e64bf3e6d309adf1333..fdf5e2a00aa630c52b07bd1d4c8ccbcc3805a145 100644
--- a/src/main/java/net/titanium/Titanium.java
+++ b/src/main/java/net/titanium/Titanium.java
@@ -45,10 +45,10 @@ public class Titanium {
         }
 
         if (serverConfig.combat.async.hitDetection) {
-            this.hitDetectionThread = new CombatThread("Hit Detection Thread");
+            this.hitDetectionThread = new CombatThread("Titanium - Hit Detection Thread");
         }
         if (serverConfig.combat.async.knockback) {
-            this.knockbackThread = new CombatThread("Knockback Thread");
+            this.knockbackThread = new CombatThread("Titanium - Knockback Thread");
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
index 12b40e0799a95245db30c086248db2c57b1351c3..584c416d96ca45b2efc1934e1bc9f46d4e3fa2c9 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
@@ -40,7 +40,7 @@ public class CraftAsyncScheduler extends CraftScheduler {
 
     private final ThreadPoolExecutor executor = new ThreadPoolExecutor(
             4, Integer.MAX_VALUE,30L, TimeUnit.SECONDS, new SynchronousQueue<>(),
-            new ThreadFactoryBuilder().setNameFormat("Craft Scheduler Thread - %1$d").build());
+            new ThreadFactoryBuilder().setNameFormat("Craft Scheduler Thread #%d").build());
     private final Executor management = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder()
             .setNameFormat("Craft Async Scheduler Management Thread").build());
     private final List<CraftTask> temp = new ArrayList<>();
