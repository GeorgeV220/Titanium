From 7279937c32befd1235cea72da795f4880e07462f Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Mon, 29 Aug 2022 15:18:41 +0200
Subject: [PATCH] Backport some modern Location API


diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index e7af316d..6312f4b0 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -1,5 +1,6 @@
 package org.bukkit;
 
+import com.google.common.base.Preconditions;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -8,6 +9,7 @@ import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.util.NumberConversions;
 import static org.bukkit.util.NumberConversions.checkFinite;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a 3-dimensional position in a world
@@ -487,6 +489,93 @@ public class Location implements Cloneable, ConfigurationSerializable {
         return this;
     }
 
+    // Paper start
+    /**
+     * Sets the position of this Location and returns itself
+     *
+     * This mutates this object, clone first.
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     * @return self (not cloned)
+     */
+    @NotNull
+    public Location set(double x, double y, double z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+        return this;
+    }
+
+    /**
+     * Takes the x/y/z from base and adds the specified x/y/z to it and returns self
+     *
+     * This mutates this object, clone first.
+     * @param base The base coordinate to modify
+     * @param x X coordinate to add to base
+     * @param y Y coordinate to add to base
+     * @param z Z coordinate to add to base
+     * @return self (not cloned)
+     */
+    @NotNull
+    public Location add(@NotNull Location base, double x, double y, double z) {
+        return this.set(base.x + x, base.y + y, base.z + z);
+    }
+
+    /**
+     * Takes the x/y/z from base and subtracts the specified x/y/z to it and returns self
+     *
+     * This mutates this object, clone first.
+     * @param base The base coordinate to modify
+     * @param x X coordinate to subtract from base
+     * @param y Y coordinate to subtract from base
+     * @param z Z coordinate to subtract from base
+     * @return self (not cloned)
+     */
+    @NotNull
+    public Location subtract(@NotNull Location base, double x, double y, double z) {
+        return this.set(base.x - x, base.y - y, base.z - z);
+    }
+
+    /**
+     * @return A new location where X/Y/Z are on the Block location (integer value of X/Y/Z)
+     */
+    @NotNull
+    public Location toBlockLocation() {
+        Location blockLoc = this.clone();
+        blockLoc.setX(this.getBlockX());
+        blockLoc.setY(this.getBlockY());
+        blockLoc.setZ(this.getBlockZ());
+        return blockLoc;
+    }
+
+    /**
+     * @return A new location where X/Y/Z are the center of the block
+     */
+    @NotNull
+    public Location toCenterLocation() {
+        Location centerLoc = clone();
+        centerLoc.setX(getBlockX() + 0.5);
+        centerLoc.setY(getBlockY() + 0.5);
+        centerLoc.setZ(getBlockZ() + 0.5);
+        return centerLoc;
+    }
+
+    // Paper start - Add heightmap api
+
+    /**
+     * Returns a copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ())
+     * @return A copy of this location except with y = getWorld().getHighestBlockYAt(this.getBlockX(), this.getBlockZ())
+     * @throws NullPointerException if {{@link #getWorld()}} is {@code null}
+     */
+    @NotNull
+    public Location toHighestLocation() {
+        Location ret = this.clone();
+        ret.setY(this.getWorld().getHighestBlockYAt(this));
+        return ret;
+    }
+    // Paper end
+
     @Override
     public boolean equals(Object obj) {
         if (obj == null) {
-- 
2.36.0.windows.1

