From 83eff889c26ce3a3e3c4f084e634b03f41f21a1a Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sun, 5 Jun 2022 02:40:01 +0200
Subject: [PATCH] Add more informations to /tps command


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 56def8ad4..fad595159 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -11,8 +11,7 @@ import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
-import java.io.InputStreamReader;
-import java.time.Duration;
+import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -179,6 +178,8 @@ public final class CraftServer implements Server {
     private final List<CraftPlayer> playerView;
     public int reloadCount;
 
+    public final Instant startTime; // Titanium
+
     private final class BooleanWrapper {
         private boolean value = true;
     }
@@ -279,6 +280,7 @@ public final class CraftServer implements Server {
         // loadPlugins();
         // enablePlugins(PluginLoadOrder.STARTUP);
         // Spigot End
+        this.startTime = Instant.now(); // Titanium
     }
 
     public boolean getCommandBlockOverride(String command) {
@@ -1938,6 +1940,10 @@ public final class CraftServer implements Server {
             return serverConfig;
         }
 
+        @Override
+        public Instant getStartTime() {
+            return startTime;
+        }
     };
 
     public Titanium titanium() {
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index fcaea7e25..aad78940a 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,6 +1,8 @@
 package org.spigotmc;
 
 import java.util.Arrays;
+import org.apache.commons.lang3.time.DurationFormatUtils;
+import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -29,17 +31,61 @@ public class TicksPerSecondCommand extends Command
         double[] tps = org.bukkit.Bukkit.spigot().getTPS();
         String[] tpsAvg = new String[tps.length];
 
-         for ( int i = 0; i < tps.length; i++) {
-             tpsAvg[i] = format( tps[i] );
+        for (int i = 0; i < tps.length; i++) {
+            tpsAvg[i] = formatTps(tps[i]);
         }
-        sender.sendMessage( ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
+        sender.sendMessage(ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
+        // Titanium start
+        Runtime runtime = Runtime.getRuntime();
+        sender.sendMessage(ChatColor.GOLD + "Memory Usage: " + formatMemoryUsage(runtime.totalMemory() - runtime.freeMemory(), runtime.maxMemory()));
+        sender.sendMessage(ChatColor.GOLD + "Uptime: " + ChatColor.GREEN + formatUptime(Bukkit.titanium().getUptime().toMillis()));
+        // Titanium end
 
         return true;
     }
 
-    private static String format(double tps) // PaperSpigot - made static
+    private static String formatTps(double tps) // PaperSpigot - made static
     {
-        return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
+        return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED )
                 + ( ( tps > 20.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
     }
+
+    // Titanium start
+    private static String formatMemoryUsage(long usage, long max) {
+        usage = usage / 1024 / 1024;
+        max = max / 1024 / 1024;
+
+        double usagePer = (double) usage / (double) max;
+        String usageFormated = ((usagePer > 0.8) ?
+                ChatColor.RED
+                : (usagePer > 0.6)
+                ? ChatColor.YELLOW
+                : ChatColor.GREEN) + String.valueOf(usage);
+        return usageFormated + ChatColor.GREEN + "/" + max + " MB";
+    }
+
+    private static String formatUptime(long uptime) {
+        long days = uptime / 1000 / 60 / 60 / 24;
+        long hours = (uptime / 1000 / 60 / 60) % 24;
+        long minutes = (uptime / 1000 / 60) % 60;
+        long seconds = (uptime / 1000) % 60;
+
+        String uptimeFormated = "";
+        if (days > 0) {
+            uptimeFormated += days + "d. ";
+        }
+        if (hours > 0) {
+            uptimeFormated += hours + "h. ";
+        }
+        if (minutes > 0) {
+            uptimeFormated += minutes + "m. ";
+        }
+        if (seconds > 0) {
+            uptimeFormated += seconds + "s. ";
+        }
+
+        return uptimeFormated;
+    }
+    // Titanium end
+
 }
-- 
2.38.1.windows.1

